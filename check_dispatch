#!/usr/bin/perl -w
#===============================================================================
#
#         FILE: check_dispatch
#
#        USAGE: check_dispatch -H http://www.wikidata.org
#
#  DESCRIPTION: nagios plugin to check dispatch Wstats on Wikidata
#               
#
#      OPTIONS: ---
# REQUIREMENTS: WWW::Mechanize, JSON
#         BUGS: ---
#        NOTES: ---
#       AUTHOR: Christopher Johnson, christopher.johnson@wikimedia.de
#      COMPANY:
#      VERSION: 0.1
#      CREATED: 
#     REVISION: ---
#===============================================================================

use strict;
use warnings;
#no warnings qw(uninitialized);

# load libwww module
use LWP;

# load JSON module
use JSON;
use JSON::Path;

# load Getopt::Long module for cli arguments
use Getopt::Long;

# load nagios utils module 
#use lib utils.pm;
#use utils qw(%ERRORS);

# load Pod::Usage module for automatic documentation
use Pod::Usage;

# Mechanize calls the server
use WWW::Mechanize;

#Data Dump for Mech Response
use Data::Dumper;

#Storable for persistance 
use Storable qw( freeze thaw );

#-------------------------------------------------------------------------------
# GLOBAL VARIABLES
#-------------------------------------------------------------------------------
# this hash is provided by module utils if nagios is present
my %ERRORS=('OK'=>0,'WARNING'=>1,'CRITICAL'=>2,'UNKNOWN'=>3,'DEPENDENT'=>4);

# filter null value params
my @filtered_keys = ('freshest','stalest','median');

# check user-agent
my $agent = "nagios check_dispatch";

# save content-type header to validate json
my $header = undef;

# mediawiki url 
my $siteurl = undef;    # this has to be a cli argument

# url for api call to site statistics
my $apiurl = "/w/api.php?action=query&meta=siteinfo&format=json&siprop=statistics";

# concatenate base url and api url

# static JSON paths to request metric keys
my $keypath = "query.statistics.dispatch.newest.timestamp";
my $keypath2 = "query.statistics.dispatch.average.lag";

my $debug    = undef;
my $response = undef;
my $help     = undef;
my $version  = "0.1";
my $realm    = undef;
my $netloc   = undef;
my $user     = undef;
my $passwd   = undef;
my $revision = undef;

#-------------------------------------------------------------------------------
# process cli arguments
#-------------------------------------------------------------------------------
Getopt::Long::Configure( "no_ignore_case", "bundling" );
GetOptions(
    'H|hostname=s' => \$siteurl,
    'n|netloc=s'   => \$netloc,
    'r|realm=s'    => \$realm,
    'u|user=s'     => \$user,
    'p|passwd=s'   => \$passwd,
    'h|help|?'     => \$help,
    'v|verbose'    => \$debug,
    'V|version'    => \$revision,
);

# give version if asked and exit
if ($revision) {
    print "$0 version: $version\n";
    exit $ERRORS{'OK'};
}

# if help chosen, display it
pod2usage( -verbose => 2, -noperldoc => 1, ) if $help;

# if no -H specified, show usage
pod2usage() unless $siteurl;

#-------------------------------------------------------------------------------
# start the check
#-------------------------------------------------------------------------------
# create a user agent object to show in the webserver logs
my $ua = LWP::UserAgent->new;
$ua->agent($agent);

# do not wait for ever, after 20 seconds give up
$ua->timeout(20);

if ( defined $debug ) {
    $ua->show_progress("true");
}

# concatenate base url and api url
my $fullurl = $siteurl . $apiurl;

# if we need to enter login info, else just get the url
if ( defined $user ) {
    $ua->credentials( $netloc, $realm, $user, $passwd );
    $response = $ua->get($fullurl);
}
else {
    $response = $ua->get($fullurl);
}

# if the web request is succesful, proceed with check. Else exit with warning.
if ( $response->is_success ) {

    $header = $response->header("Content-Type");

    die "could not get header\n" unless defined $header;

    # if the api call fails, then die
    if ( $header =~ m/json.*$/i  ) {
            print "format:json\n";
    }
    else {
        print "WARNING: This does not look like the correct site\n";
        print "$header\n" if defined $header;
        exit $ERRORS{'WARNING'};
    }
}
else {
    print "WARNING: we got: ", $response->status_line,
      " when requesting $fullurl.
    Something went wrong fetching it.\n";
    exit $ERRORS{'WARNING'};
}

#-------------------------------------------------------------------------------
# call the API with Mechanize
#-------------------------------------------------------------------------------
# create new mechanize object without autocheck
my $mech = WWW::Mechanize->new( autocheck => 0, );

# set another user-agent, mediawiki.org blocks libwww-perl (if they think this
# helps ...)
$mech->agent($agent);

# show debugging if verbose is on
if ( defined $debug ) {
    $mech->show_progress(1);
}

# get the page
$mech->get($fullurl);

if ( $mech->success ) {
    my $content = $mech->content or Dumper $mech->response;
    
    #traverse JSON path and decode value
    my $jpath = &json_path($keypath);
    my @dispatch = $jpath->values($content);
    my $jpath2 = &json_path($keypath2);
    my @dispatch2 = $jpath2->values($content);    

    #my $storedquery = freeze ( $query);
    #my $thawedquery = thaw (@{ $storedquery->{'query'} } );
    #print "$thawedquery";
    print "the newest timestamp from the changes table is @dispatch | lag=  @dispatch2 [s];[3];[10]\n";

#-------------------------------------------------------------------------------
# another method for retrieving HoHoHoH
#-------------------------------------------------------------------------------

#    for  my $k1 ( sort keys %$query ) {
#        print "$k1\n";
     
#        for my $k2 ( sort keys %{$query->{ $k1 }} ) {
#            print "\t$k2\n";
     
#            for my $k3 ( sort keys %{$query->{ $k1 }->{ $k2 }} ) {
#                print "\t\t$k3\n";
               
#	        for my $k4 ( sort keys %{$query->{ $k1}->{ $k2 }->{ $k3 }} ) {
#                     print "\t\t$k4\n";

#                     for my $k5 ( sort keys %{$query->{ $k1}->{ $k2 }->{ $k3 }->{ $k4 }} ) {
#                       print "\t\t$k5 => $query->{ $k1 }->{ $k2 }->{ $k3 }->{ $k4 }->{ $k5 }\n";
#                      }
#                 }
#            }
#        }
#    }
}
else {
    print "WARNING: webserver $fullurl returned ", $mech->status, "\n";
    exit $ERRORS{'WARNING'};
}

sub json_path {
    JSON::Path->new($_[0]);
}

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#  Application Documentation
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

=head1 NAME

check_dispatch - check dispatch stats 

=head1 VERSION

This documentation refers to <check_dispatch>

=head1 USAGE

check_dispatch -H http://www.example.com [-v true] [-n netlocation -r
realm -u username -p password

=head1 REQUIRED ARGUMENTS

-H|--hostname
web address of site hosting the mediawiki site;

=head1 OPTIONS

-H|--hostname
web address of site hosting the mediawiki site;

-n|--netloc
hostname:port combination for webserver dns hostname. *NO* protocol (no
http:// in it), just a simple or fully qualified name plus the port number.

-r|--realm
authentication realm; this is case sensitive.

-u|--username

-p|--password

-v|--verbose
standard this setting is 'false'. If 'true', then one can see extra debugging
info of the http request;

-h|--help
this text;

=head1 DESCRIPTION

Nagios check to monitor dispatch stats via the Wikidata API

When using this check for password protected sites (those where the webserver
sends a 401 answer code and a pop up browser window requests us to enter a
username/password combination), we need to enter in fact four arguments: the
netloc, username, password and realm.

The netloc (this is the name the libwww gives it) is a string formed by a
combination of the dns hostname followed by ':' and then by a number. The
number represents the port used by the webserver, usually 80. So the netloc
for the site http://www.example.com would be www.example.com:80, without the
http:// part which refers to the web protocol.

For the other 3 arguments (realm, username and password) please refer to
http://en.wikipedia.org/wiki/Basic_access_authentication 

=head1 DIAGNOSTICS

This check can fail because of network problems (no connectivity to the
internet to check the mediawiki.org version, for instance). Use the --verbose
true parameter to get better information if it fails.

=head1 CONFIGURATION AND ENVIRONMENT

Place the plugin in the plugin directory of the nagios server (usually,
/usr/local/nagios/libexec/), make the nagios user its owner and change the
permissions to 775.

=head1 DEPENDENCIES

This plugin requires the WWW::Mechanize module. This is a very common module,
so chances are it is already installed on your system.

On a (recent) Redhat based system, you can install it using yum if you enable
the repoforge yum repository:

# yum install perl-WWW-Mechanize

On a debian based system the package is called libwww-mechanize-perl and you
use apt-get so:

# apt-get install libwww-mechanize-perl

On other flavours of unix, check your package manager documentation or use
something like perlbrew or, as a last resort, the cpan shell, to install it.

=head1 INCOMPATIBILITIES

None known yet.

=head1 BUGS AND LIMITATIONS

=head1 AUTHOR

=head1 LICENCE AND COPYRIGHT

This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See perldoc perlartistic.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

=cut

